{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "HashRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockToActualise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getOrCompute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "request",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "save",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x700285A03cEbd742E84C6dA06430e466BAd75790",
    "contractAddress": "0xC30dBc30fF22c47EF79429607Ec415aA94e5d436",
    "transactionIndex": 1,
    "gasUsed": "168529",
    "logsBloom": "0x
    "blockHash": "0x3b9a0807a57dde2b7523ed240023c51bcdd82a1a09f1e11588b9ec6b081f1433",
    "transactionHash": "0x56fbdf8e6abc51cf4c0d078a33f643f3d0eefc138776f96f24ca0d2190ec3757",
    "logs": [],
    "blockNumber": 15339024,
    "cumulativeGasUsed": "195046",
    "status": 1,
    "byzantium": true
  },
  "address": "0xC30dBc30fF22c47EF79429607Ec415aA94e5d436",
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HashRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockToActualise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getOrCompute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"request\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"save\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/utils/BlockHashRegister.sol\":\"BlockHashRegister\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/utils/BlockHashRegister.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract BlockHashRegister {\\n    mapping(uint256 => bytes32) _blockHashes;\\n    uint256 _blockToActualise;\\n\\n    event HashRequest(uint256 blockNumber);\\n\\n    function get(uint256 blockNumber) external view returns (bytes32) {\\n        return _blockHashes[blockNumber];\\n    }\\n\\n    function getOrCompute(uint256 blockNumber) external view returns (bytes32) {\\n        bytes32 blockHash = _blockHashes[blockNumber];\\n        if (uint256(blockHash) == 0) {\\n            return _computeBlockHash(blockNumber);\\n        }\\n        return blockHash;\\n    }\\n\\n    function getBlockToActualise() external view returns (uint256) {\\n        return _blockToActualise;\\n    }\\n\\n    function request() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = block.number;\\n            emit HashRequest(block.number);\\n        }\\n    }\\n\\n    function save() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = 0;\\n        }\\n    }\\n\\n    function _computeBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (blockNumber < 256 || blockNumber > block.number - 256) {\\n            return blockhash(blockNumber);\\n        } else {\\n            uint256 moduloBlockNumber = block.number - ((block.number - blockNumber - 1) % 256) + 1;\\n            return blockhash(moduloBlockNumber);\\n        }\\n    }\\n\\n    function _save(uint256 blockNumber) internal returns (bytes32) {\\n        bytes32 blockHash = _computeBlockHash(blockNumber);\\n        _blockHashes[blockNumber] = blockHash;\\n        return blockHash;\\n    }\\n}\\n\",\"keccak256\":\"0xbf9f49a9ee6426191a58a2796f50ca4652c8dd635e120aadb277cf2ffb2f0cc9\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610216806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063338cdca11461005c57806342dad49e14610066578063803ee1d91461006e5780639507d39a1461009d578063d88d7f46146100ba575b600080fd5b6100646100c2565b005b610064610113565b61008b6004803603602081101561008457600080fd5b5035610130565b60408051918252519081900360200190f35b61008b600480360360208110156100b357600080fd5b503561015d565b61008b61016f565b60015443811015610110576100d681610175565b5043600181905560408051918252517fa21755eabd8128750f344a2d1ce0cd3e1a2f2eb74ac9642568c437ca76f9005a9181900360200190a15b50565b600154438110156101105761012781610175565b50600060015550565b600081815260208190526040812054806101555761014d8361019a565b915050610158565b90505b919050565b60009081526020819052604090205490565b60015490565b6000806101818361019a565b6000848152602081905260409020819055915050919050565b60006101008210806101af5750610100430382115b156101bc57508040610158565b6000610100600184430303816101ce57fe5b0643036001019050804091505061015856fea264697066735822122088310bdc683857f3a4d609933acdb151acf9fe71be0f83493069075eace0ab9564736f6c63430006050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063338cdca11461005c57806342dad49e14610066578063803ee1d91461006e5780639507d39a1461009d578063d88d7f46146100ba575b600080fd5b6100646100c2565b005b610064610113565b61008b6004803603602081101561008457600080fd5b5035610130565b60408051918252519081900360200190f35b61008b600480360360208110156100b357600080fd5b503561015d565b61008b61016f565b60015443811015610110576100d681610175565b5043600181905560408051918252517fa21755eabd8128750f344a2d1ce0cd3e1a2f2eb74ac9642568c437ca76f9005a9181900360200190a15b50565b600154438110156101105761012781610175565b50600060015550565b600081815260208190526040812054806101555761014d8361019a565b915050610158565b90505b919050565b60009081526020819052604090205490565b60015490565b6000806101818361019a565b6000848152602081905260409020819055915050919050565b60006101008210806101af5750610100430382115b156101bc57508040610158565b6000610100600184430303816101ce57fe5b0643036001019050804091505061015856fea264697066735822122088310bdc683857f3a4d609933acdb151acf9fe71be0f83493069075eace0ab9564736f6c63430006050033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12787,
        "contract": "src/utils/BlockHashRegister.sol:BlockHashRegister",
        "label": "_blockHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 12789,
        "contract": "src/utils/BlockHashRegister.sol:BlockHashRegister",
        "label": "_blockToActualise",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}